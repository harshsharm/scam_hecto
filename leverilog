module tb_divide_4bit_unsigned();
reg [3:0] A,B;
reg clk=0;
reg reset;
wire [3:0] q,rem;
wire error;
divide_4bit_unsigned inst1(.A(A),.B(B),.clk(clk),.reset(reset),.quotient(q),.reminder(rem),.error(error));
always begin
	#1 clk=~clk;
end
initial begin
	A=1;
	B=1;
	reset=1;
	#100
	if(q == 1 && rem ==0)
	 $display("passed_3");
       
	A=15;
        B=1;
        reset=0;
        #100
         if(q == 0 && rem ==0)        
        $display("passed_1");
  
	A=15;
        B=1;
        reset=1;
        #100
        if(q == 15 && rem ==0)
         $display("passed_3");

	A=0;
        B=1;
        reset=1;
        #100
	if(q == 0 && rem == 0 && error == 0) 
        $display("passed_3");
	 
	
	
 	A=1;
        B=15;
        reset=1;
        #100
	if(q == 0 && rem == 1 && error == 0) 
        $display("passed_4");
	A=15;
        B=15;
        reset=1;
        #100
	if(q == 1 && rem == 0 && error == 0) 
        $display("passed_4");
	A=0;
        B=15;
        reset=1;
        #100
	if(q == 0 && rem == 0 && error == 0) 
        $display("passed_4");
         A=12;
        B=3;
        reset=1;
        #100
        if(q == 4 && rem ==0 && error == 0) 
         $display("passed_5");
	 A=13;
        B=3;
        reset=1;
        #100
        if(q == 4 && rem ==1 && error == 0)
         $display("passed_5");
	 A=14;
        B=3;
        reset=1;
        #100
        if(q == 4 && rem ==2 && error == 0)
         $display("passed_5");
	 A=12;
        B=0;
        reset=1;
        #100
        if(error == 1)
         $display("passed_2");
	
	$finish;
end
initial begin
	$dumpfile("divide_4bit_unsigned.vcd");
	$dumpvars(0,tb_divide_4bit_unsigned);
end
endmodule
